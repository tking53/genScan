# @authors S.V. Paulauskas, K. Smith, and C. Thronsberry

cmake_minimum_required(VERSION 3.1)

project(GENSCAN C CXX )

#Set the C++ standard to c++20.
if(NOT CMAKE_CXX_STANDARD)
	set(CMAKE_CXX_STANDARD 17)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()


#Use rpath on Mac OS
set(CMAKE_MACOSX_RPATH TRUE)

if (CMAKE_COMPILER_IS_GNUCXX)
    #Make compiler messages nice with colored tags.
    if (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "4.9")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-color=auto")
    endif ()

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -fPIC")
endif ()

#if user does not specify prefix we assign it to the install directory
#@TODO I do not like the fact that it makes the install directory before I'm
#ready for it. There are cases where I do not want to actually install just
#build. This configuration adds additional junk to my directory that I may
#not actually want or need.
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    message(STATUS "Install Prefix not specified.")
    file(MAKE_DIRECTORY install)
    get_filename_component(INSTALL_DIR ${CMAKE_BINARY_DIR}/../install REALPATH)
    set(CMAKE_INSTALL_PREFIX ${INSTALL_DIR} CACHE PATH "Install Prefix" FORCE)
endif ()
message(STATUS "Installing to ${CMAKE_INSTALL_PREFIX}")

#Add additional CXX flags if we use the Debug option
set(CMAKE_BUILD_TYPE Debug CACHE STRING "Build type, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build (Debug, Release, RelWithDebInfo, MinSizeRel)" FORCE)
	message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" ) 
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
endif()
# endif (CMAKE_BUILD_TYPE MATCHES "Debug")

#------------------------------------------------------------------------------
#We are going to include this additional module here since it could be useful
#when setting all of the following options.
include(CMakeDependentOption)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL "Generates compile_commands.json, needed for some IDEs among other things" FORCE)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#Find packages needed for the software.
#Load additional find_package scripts.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/Cmake_modules")

#Find ROOT if USE_ROOT was set.
find_package(ROOT REQUIRED COMPONENTS TreePlayer)
set(ROOTSYS $ENV{ROOTSYS} CACHE STRING "ROOT directory.")
find_program(ROOT_CONFIG_EXECUTABLE root-config PATHS ${ROOTSYS}/bin)
find_program(ROOTCINT_EXECUTABLE rootcint PATHS $ENV{ROOTSYS}/bin)
find_program(GENREFLEX_EXECUTABLE genreflex PATHS $ENV{ROOTSYS}/bin)
if (ROOT_CONFIG_EXECUTABLE)
    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --prefix
        OUTPUT_VARIABLE ROOTSYS
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --version
        OUTPUT_VARIABLE ROOT_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --incdir
        OUTPUT_VARIABLE ROOT_INCLUDE_DIR
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --libs
        OUTPUT_VARIABLE ROOT_LIBRARIES
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --glibs
        OUTPUT_VARIABLE ROOT_GUI_LIBRARIES
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    set(ROOT_LIBRARY_DIR ${ROOTSYS}/lib)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --has-minuit2
        OUTPUT_VARIABLE ROOT_HAS_MINUIT2
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --has-cxx17
        OUTPUT_VARIABLE ROOT_HAS_CXX17)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --has-cxx14
        OUTPUT_VARIABLE ROOT_HAS_CXX14)

    execute_process(
        COMMAND ${ROOT_CONFIG_EXECUTABLE} --has-cxx11
        OUTPUT_VARIABLE ROOT_HAS_CXX11)

endif ()

if (${ROOT_VERSION} VERSION_LESS "6.10")
    message(FATAL_ERROR "Minimum ROOT version is 6.10.00.")
endif (${ROOT_VERSION} VERSION_LESS "6.10")
mark_as_advanced(FORCE GENREFLEX_EXECUTABLE ROOTCINT_EXECUTABLE ROOT_CONFIG_EXECUTABLE)
include_directories(${ROOT_INCLUDE_DIR})
link_directories(${ROOT_LIBRARY_DIR})
#------------------------------------------------------------------------------

include(ExternalProject)

option(USE_SYSTEM_PUGIXML "Use the system installed pugixml, if not then we will download one and use that one" OFF)
if( USE_SYSTEM_PUGIXML )
	find_package(Pugixml REQUIRED)
	message(FOUND PUGIXML AT ${Pugixml_DIR})
else()
	set(PUGI_EXTERNAL_INSTALL_LOCATION ${CMAKE_BINARY_DIR}/external/pugi)
	ExternalProject_Add(PugixmlProject
		GIT_REPOSITORY https://github.com/zeux/pugixml
		GIT_TAG v1.13
		CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${PUGI_EXTERNAL_INSTALL_LOCATION} -DCMAKE_VERBOSE_MAKEFILE=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		BUILD_COMMAND make -s
		INSTALL_COMMAND make -s install
		)
	include_directories(${PUGI_EXTERNAL_INSTALL_LOCATION}/include)
	link_directories(${PUGI_EXTERNAL_INSTALL_LOCATION}/lib)
endif()
	
option(USE_SYSTEM_FMT "Use the system fmt library, if not then we will download and use that one" OFF)
if( USE_SYSTEM_FMT )
	find_package(fmt REQUIRED)
	message(FOUND FMT AT ${fmt_DIR})
else()
	set(FMT_EXTERNAL_INSTALL_LOCATION ${CMAKE_BINARY_DIR}/external/fmt)
	ExternalProject_Add(fmtProject
		GIT_REPOSITORY https://github.com/fmtlib/fmt
		GIT_TAG 8.1.1 
		CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${FMT_EXTERNAL_INSTALL_LOCATION} -DCMAKE_VERBOSE_MAKEFILE=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		BUILD_COMMAND make -s
		INSTALL_COMMAND make -s install
		)
	include_directories(${FMT_EXTERNAL_INSTALL_LOCATION}/include)
	link_directories(${FMT_EXTERNAL_INSTALL_LOCATION}/lib)
endif()

option(USE_SYSTEM_SPDLOG "Use either spdlog or messenger class" OFF)
if( USE_SYSTEM_SPDLOG )
	find_package(spdlog REQUIRED)
	message(FOUND SPDLOG AT ${spdlog_DIR})
else()
	set(SPDLOG_EXTERNAL_INSTALL_LOCATION ${CMAKE_BINARY_DIR}/external/spdlog)
	ExternalProject_Add(spdlogProject
		GIT_REPOSITORY https://github.com/gabime/spdlog
		GIT_TAG v1.9.2 
		CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${SPDLOG_EXTERNAL_INSTALL_LOCATION} -DCMAKE_VERBOSE_MAKEFILE=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
		BUILD_COMMAND make -s
		INSTALL_COMMAND make -s install
		)
	include_directories(${SPDLOG_EXTERNAL_INSTALL_LOCATION}/include)
	link_directories(${SPDLOG_EXTERNAL_INSTALL_LOCATION}/lib)
endif()

add_subdirectory(utility)
add_subdirectory(core)
add_subdirectory(processors)
add_subdirectory(parsers)

add_executable(GenScanor scanmain.cpp)

#include_directories(${PROJECT_SOURCE_DIR}/utility/include)
target_link_libraries(GenScanor PRIVATE PARSER_LIB PROCESSOR_LIB CORE_LIB UTILITY_LIB)
if( USE_SYSTEM_FMT )
	target_link_libraries(GenScanor PRIVATE fmt::fmt)
endif()
if( USE_SYSTEM_SPDLOG )
	target_link_libraries(GenScanor PRIVATE spdlog::spdlog_header_only)
endif()
